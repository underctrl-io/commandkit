name: (CommandKit) Publish Dev Builds

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'packages/commandkit/**'
      - 'packages/create-commandkit/**'
      - 'packages/legacy/**'
      - 'packages/redis/**'
      - 'packages/i18n/**'
      - 'packages/devtools/**'
      - 'packages/devtools-ui/**' # this is not a package we want to publish, but devtools depends on it
      - 'packages/cache/**'

jobs:
  publish:
    name: üöÄ Publish Dev Builds
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: pnpm/action-setup@v2
        with:
          version: '9.15.0'

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v2
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: üíæ Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: üç≥ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üî¢ Set version suffix
        id: version
        run: echo "suffix=-dev.$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: üìù Update package versions
        run: |
          suffix="${{ steps.version.outputs.suffix }}"
          for dir in packages/*; do
            [ -f "$dir/package.json" ] || continue
            node -e "
              const fs = require('fs');
              const path = './$dir/package.json';
              const pkg = require(path);
              pkg.version += '$suffix';
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2));
            "
          done

      - name: üß± Build packages
        run: pnpm build

      - name: üöÄ Publish each package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          # NPM_CONFIG_PROVENANCE: true
        run: |
          PACKAGES=(
            "commandkit:packages/commandkit"
            "create-commandkit:packages/create-commandkit"
            "@commandkit/legacy:packages/legacy"
            "@commandkit/redis:packages/redis"
            "@commandkit/i18n:packages/i18n"
            "@commandkit/devtools:packages/devtools"
            "@commandkit/cache:packages/cache"
          )

          for entry in "${PACKAGES[@]}"; do
            IFS=":" read -r name path <<< "$entry"
            echo "üì¶ Publishing $name..."
            (pnpm --filter="$name" publish --no-git-checks --access public --tag dev && echo "‚úÖ Published $name") || echo "‚ùå Failed to publish $name"
          done

      - name: üö´ Deprecate previous dev versions
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: |
          PACKAGES=(
            "commandkit"
            "create-commandkit"
            "@commandkit/legacy"
            "@commandkit/redis"
            "@commandkit/i18n"
            "@commandkit/devtools"
            "@commandkit/cache"
          )

          for pkg in "${PACKAGES[@]}"; do
            echo "üìâ Deprecating previous dev version of $pkg..."
            (
              ALL_VERSIONS=$(npm info "$pkg" versions -json)
              VERSION_TO_DEPRECATE=$(echo "$ALL_VERSIONS" | node -e "
                const versions = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8'));
                const devVersions = versions.filter(v => v.includes('-dev.'));
                const versionToDeprecate = devVersions[devVersions.length - 2];
                console.log(versionToDeprecate);
              ")
              [ -n "$VERSION_TO_DEPRECATE" ] && npm deprecate "$pkg@$VERSION_TO_DEPRECATE" "Deprecated dev version." && echo "‚úÖ Deprecated $VERSION_TO_DEPRECATE"
            ) || echo "‚ö†Ô∏è Skipped deprecation for $pkg (maybe not enough dev versions)"
          done
