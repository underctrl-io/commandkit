/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PluginsImport } from './routes/plugins'
import { Route as GuildsImport } from './routes/guilds'
import { Route as FeatureFlagsImport } from './routes/feature-flags'
import { Route as EventsImport } from './routes/events'
import { Route as CommandsImport } from './routes/commands'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PluginsRoute = PluginsImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRoute,
} as any)

const GuildsRoute = GuildsImport.update({
  id: '/guilds',
  path: '/guilds',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagsRoute = FeatureFlagsImport.update({
  id: '/feature-flags',
  path: '/feature-flags',
  getParentRoute: () => rootRoute,
} as any)

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const CommandsRoute = CommandsImport.update({
  id: '/commands',
  path: '/commands',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/commands': {
      id: '/commands'
      path: '/commands'
      fullPath: '/commands'
      preLoaderRoute: typeof CommandsImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/feature-flags': {
      id: '/feature-flags'
      path: '/feature-flags'
      fullPath: '/feature-flags'
      preLoaderRoute: typeof FeatureFlagsImport
      parentRoute: typeof rootRoute
    }
    '/guilds': {
      id: '/guilds'
      path: '/guilds'
      fullPath: '/guilds'
      preLoaderRoute: typeof GuildsImport
      parentRoute: typeof rootRoute
    }
    '/plugins': {
      id: '/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/commands': typeof CommandsRoute
  '/events': typeof EventsRoute
  '/feature-flags': typeof FeatureFlagsRoute
  '/guilds': typeof GuildsRoute
  '/plugins': typeof PluginsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/commands': typeof CommandsRoute
  '/events': typeof EventsRoute
  '/feature-flags': typeof FeatureFlagsRoute
  '/guilds': typeof GuildsRoute
  '/plugins': typeof PluginsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/commands': typeof CommandsRoute
  '/events': typeof EventsRoute
  '/feature-flags': typeof FeatureFlagsRoute
  '/guilds': typeof GuildsRoute
  '/plugins': typeof PluginsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/commands'
    | '/events'
    | '/feature-flags'
    | '/guilds'
    | '/plugins'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/commands' | '/events' | '/feature-flags' | '/guilds' | '/plugins'
  id:
    | '__root__'
    | '/'
    | '/commands'
    | '/events'
    | '/feature-flags'
    | '/guilds'
    | '/plugins'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommandsRoute: typeof CommandsRoute
  EventsRoute: typeof EventsRoute
  FeatureFlagsRoute: typeof FeatureFlagsRoute
  GuildsRoute: typeof GuildsRoute
  PluginsRoute: typeof PluginsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommandsRoute: CommandsRoute,
  EventsRoute: EventsRoute,
  FeatureFlagsRoute: FeatureFlagsRoute,
  GuildsRoute: GuildsRoute,
  PluginsRoute: PluginsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/commands",
        "/events",
        "/feature-flags",
        "/guilds",
        "/plugins"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/commands": {
      "filePath": "commands.tsx"
    },
    "/events": {
      "filePath": "events.tsx"
    },
    "/feature-flags": {
      "filePath": "feature-flags.tsx"
    },
    "/guilds": {
      "filePath": "guilds.tsx"
    },
    "/plugins": {
      "filePath": "plugins.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
