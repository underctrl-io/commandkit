/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as PluginsRouteImport } from './routes/plugins';
import { Route as GuildsRouteImport } from './routes/guilds';
import { Route as FeatureFlagsRouteImport } from './routes/feature-flags';
import { Route as EventsRouteImport } from './routes/events';
import { Route as CommandsRouteImport } from './routes/commands';
import { Route as IndexRouteImport } from './routes/index';

const PluginsRoute = PluginsRouteImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any);
const GuildsRoute = GuildsRouteImport.update({
  id: '/guilds',
  path: '/guilds',
  getParentRoute: () => rootRouteImport,
} as any);
const FeatureFlagsRoute = FeatureFlagsRouteImport.update({
  id: '/feature-flags',
  path: '/feature-flags',
  getParentRoute: () => rootRouteImport,
} as any);
const EventsRoute = EventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRouteImport,
} as any);
const CommandsRoute = CommandsRouteImport.update({
  id: '/commands',
  path: '/commands',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/commands': typeof CommandsRoute;
  '/events': typeof EventsRoute;
  '/feature-flags': typeof FeatureFlagsRoute;
  '/guilds': typeof GuildsRoute;
  '/plugins': typeof PluginsRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/commands': typeof CommandsRoute;
  '/events': typeof EventsRoute;
  '/feature-flags': typeof FeatureFlagsRoute;
  '/guilds': typeof GuildsRoute;
  '/plugins': typeof PluginsRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/commands': typeof CommandsRoute;
  '/events': typeof EventsRoute;
  '/feature-flags': typeof FeatureFlagsRoute;
  '/guilds': typeof GuildsRoute;
  '/plugins': typeof PluginsRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/commands'
    | '/events'
    | '/feature-flags'
    | '/guilds'
    | '/plugins';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/commands' | '/events' | '/feature-flags' | '/guilds' | '/plugins';
  id:
    | '__root__'
    | '/'
    | '/commands'
    | '/events'
    | '/feature-flags'
    | '/guilds'
    | '/plugins';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CommandsRoute: typeof CommandsRoute;
  EventsRoute: typeof EventsRoute;
  FeatureFlagsRoute: typeof FeatureFlagsRoute;
  GuildsRoute: typeof GuildsRoute;
  PluginsRoute: typeof PluginsRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/plugins': {
      id: '/plugins';
      path: '/plugins';
      fullPath: '/plugins';
      preLoaderRoute: typeof PluginsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/guilds': {
      id: '/guilds';
      path: '/guilds';
      fullPath: '/guilds';
      preLoaderRoute: typeof GuildsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/feature-flags': {
      id: '/feature-flags';
      path: '/feature-flags';
      fullPath: '/feature-flags';
      preLoaderRoute: typeof FeatureFlagsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/events': {
      id: '/events';
      path: '/events';
      fullPath: '/events';
      preLoaderRoute: typeof EventsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/commands': {
      id: '/commands';
      path: '/commands';
      fullPath: '/commands';
      preLoaderRoute: typeof CommandsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommandsRoute: CommandsRoute,
  EventsRoute: EventsRoute,
  FeatureFlagsRoute: FeatureFlagsRoute,
  GuildsRoute: GuildsRoute,
  PluginsRoute: PluginsRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
